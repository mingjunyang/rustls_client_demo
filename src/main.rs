use ring::digest;
use rustls::client::ResolvesClientCert;
use rustls::internal::msgs::enums::{SignatureAlgorithm, SignatureScheme};
use rustls::{sign, Certificate, Error};
use rustls::{OwnedTrustAnchor, RootCertStore};
use std::convert::TryInto;
use std::io::{stdout, Read, Write};
use std::net::TcpStream;
use std::sync::Arc;
use webpki_roots;

use security_framework::certificate::SecCertificate;
use security_framework::identity::SecIdentity;
use security_framework::os::macos::identity::SecIdentityExt;
use security_framework::os::macos::keychain::SecKeychain;

const C1: &[u8] = &[
    0x30, 0x82, 0x02, 0x24, 0x30, 0x82, 0x01, 0xca, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x14, 0x40,
    0xf4, 0x43, 0x3a, 0xcb, 0x45, 0x48, 0xa2, 0xee, 0x6b, 0x76, 0x3a, 0xf6, 0xba, 0xe2, 0x9a, 0xd2,
    0xc4, 0xcf, 0xd0, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30,
    0x41, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 0x4e, 0x31, 0x18,
    0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x0f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x5f,
    0x45, 0x43, 0x43, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04,
    0x03, 0x0c, 0x0f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x65, 0x63, 0x63, 0x5f, 0x74, 0x65,
    0x73, 0x74, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x31, 0x30, 0x39, 0x30, 0x31, 0x31, 0x31, 0x30, 0x34,
    0x34, 0x32, 0x5a, 0x17, 0x0d, 0x32, 0x32, 0x30, 0x39, 0x30, 0x31, 0x31, 0x31, 0x30, 0x34, 0x34,
    0x32, 0x5a, 0x30, 0x3f, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43,
    0x4e, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x0e, 0x54, 0x6f, 0x6b, 0x65,
    0x6e, 0x44, 0x65, 0x6d, 0x6f, 0x32, 0x5f, 0x45, 0x43, 0x43, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03,
    0x55, 0x04, 0x03, 0x0c, 0x0e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x6d, 0x6f, 0x32, 0x5f,
    0x65, 0x63, 0x63, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01,
    0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x60, 0x01,
    0x65, 0xf7, 0x4a, 0xb3, 0xee, 0x81, 0xac, 0x19, 0xe0, 0x19, 0x85, 0xaf, 0x46, 0x3f, 0x9e, 0xfe,
    0x04, 0x90, 0x65, 0xc0, 0x8d, 0x7f, 0x19, 0x81, 0xa4, 0xa1, 0xf3, 0x1e, 0xb6, 0x0a, 0xc5, 0xa3,
    0xb5, 0x23, 0xec, 0x31, 0x61, 0x5f, 0x5c, 0x30, 0x8f, 0x9d, 0xf5, 0xcd, 0x42, 0x78, 0x67, 0xb4,
    0x44, 0x09, 0xd3, 0x83, 0x07, 0x22, 0xaa, 0xac, 0xac, 0x8f, 0x36, 0xde, 0x1a, 0x4c, 0xa3, 0x81,
    0xa1, 0x30, 0x81, 0x9e, 0x30, 0x09, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x04, 0x02, 0x30, 0x00, 0x30,
    0x11, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x86, 0xf8, 0x42, 0x01, 0x01, 0x04, 0x04, 0x03, 0x02,
    0x05, 0xe0, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x05, 0xe0, 0x30,
    0x31, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x2a, 0x30, 0x28, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05,
    0x05, 0x07, 0x03, 0x01, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08,
    0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x03, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07,
    0x03, 0x04, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x09, 0x8c, 0xd3,
    0xdd, 0xa6, 0xae, 0x00, 0xba, 0xe2, 0x5e, 0xce, 0xd0, 0x36, 0xb4, 0x80, 0x86, 0x85, 0xc3, 0xfb,
    0xac, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x72, 0x49,
    0x0c, 0x93, 0x55, 0x6e, 0xe0, 0xdc, 0xf1, 0xde, 0xbf, 0xa9, 0x8f, 0x56, 0xc3, 0x74, 0xd5, 0x79,
    0x74, 0x39, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48,
    0x00, 0x30, 0x45, 0x02, 0x20, 0x5c, 0x15, 0xb7, 0x7e, 0x02, 0xd5, 0x1b, 0x6c, 0xbb, 0x25, 0xed,
    0xa6, 0x9d, 0x84, 0x48, 0x77, 0x81, 0xd8, 0x6b, 0xad, 0x1f, 0xc1, 0x6d, 0xf5, 0x1f, 0x10, 0x09,
    0x84, 0xee, 0x99, 0xb8, 0x20, 0x02, 0x21, 0x00, 0xe7, 0xee, 0x9c, 0x36, 0xa4, 0xd7, 0xc3, 0xfb,
    0x58, 0x58, 0xcd, 0xcb, 0x66, 0xf1, 0x5b, 0x3f, 0x67, 0x72, 0xee, 0xf7, 0x7f, 0xc6, 0xfe, 0xac,
    0x0e, 0x6b, 0xd1, 0x7f, 0x8c, 0x9b, 0xa6, 0xdd,
];
//const C2: &[u8] = &[
//    0x30, 0x82, 0x02, 0x91, 0x30, 0x82, 0x02, 0x37, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x14, 0x40,
//    0xf4, 0x43, 0x3a, 0xcb, 0x45, 0x48, 0xa2, 0xee, 0x6b, 0x76, 0x3a, 0xf6, 0xba, 0xe2, 0x9a, 0xd2,
//    0xc4, 0xcf, 0xcf, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30,
//    0x7b, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 0x4e, 0x31, 0x11,
//    0x30, 0x0f, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x08, 0x53, 0x68, 0x61, 0x6e, 0x67, 0x68, 0x61,
//    0x69, 0x31, 0x11, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x08, 0x53, 0x68, 0x61, 0x6e,
//    0x67, 0x68, 0x61, 0x69, 0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0d, 0x52,
//    0x4f, 0x4f, 0x54, 0x5f, 0x45, 0x43, 0x43, 0x5f, 0x44, 0x45, 0x4d, 0x4f, 0x31, 0x16, 0x30, 0x14,
//    0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x0d, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x45, 0x43, 0x43, 0x5f,
//    0x43, 0x45, 0x52, 0x54, 0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0d, 0x54,
//    0x45, 0x53, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x45, 0x43, 0x43, 0x30, 0x1e, 0x17, 0x0d,
//    0x32, 0x31, 0x30, 0x39, 0x30, 0x31, 0x31, 0x31, 0x30, 0x33, 0x32, 0x31, 0x5a, 0x17, 0x0d, 0x33,
//    0x31, 0x30, 0x39, 0x30, 0x31, 0x31, 0x31, 0x30, 0x33, 0x32, 0x31, 0x5a, 0x30, 0x41, 0x31, 0x0b,
//    0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 0x4e, 0x31, 0x18, 0x30, 0x16, 0x06,
//    0x03, 0x55, 0x04, 0x0b, 0x0c, 0x0f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x5f, 0x45, 0x43, 0x43,
//    0x5f, 0x43, 0x45, 0x52, 0x54, 0x31, 0x18, 0x30, 0x16, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0f,
//    0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x65, 0x63, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x30,
//    0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86,
//    0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x7c, 0xca, 0x8a, 0x27, 0xa5, 0x46,
//    0x9a, 0x7e, 0x66, 0xc3, 0x14, 0xae, 0xf0, 0x79, 0xfe, 0x81, 0x1a, 0x9e, 0xab, 0x3e, 0xfd, 0x27,
//    0x2e, 0x2c, 0x82, 0x57, 0x8d, 0xb0, 0xdb, 0x10, 0x7c, 0xf0, 0x9e, 0xb1, 0x8f, 0xe8, 0x91, 0x49,
//    0x67, 0x7f, 0x12, 0xb5, 0xf1, 0x37, 0xf9, 0x91, 0xf4, 0x24, 0xa3, 0x5c, 0xf8, 0x57, 0x33, 0x48,
//    0xf8, 0x07, 0x7b, 0xe1, 0xb8, 0xdc, 0x0e, 0xaa, 0x07, 0x0e, 0xa3, 0x81, 0xd2, 0x30, 0x81, 0xcf,
//    0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x11,
//    0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x86, 0xf8, 0x42, 0x01, 0x01, 0x04, 0x04, 0x03, 0x02, 0x05,
//    0xe0, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x02, 0xe4, 0x30, 0x31,
//    0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x2a, 0x30, 0x28, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05,
//    0x07, 0x03, 0x01, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b,
//    0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x03, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03,
//    0x04, 0x30, 0x2c, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x86, 0xf8, 0x42, 0x01, 0x0d, 0x04, 0x1f,
//    0x16, 0x1d, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x53, 0x4c, 0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
//    0x74, 0x65, 0x64, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x30,
//    0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x72, 0x49, 0x0c, 0x93, 0x55, 0x6e,
//    0xe0, 0xdc, 0xf1, 0xde, 0xbf, 0xa9, 0x8f, 0x56, 0xc3, 0x74, 0xd5, 0x79, 0x74, 0x39, 0x30, 0x1f,
//    0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x4c, 0x6b, 0x98, 0xef, 0xb4,
//    0x0a, 0x83, 0xe1, 0xb3, 0xc1, 0x25, 0xa3, 0xfb, 0x2d, 0xcc, 0x18, 0xb3, 0x33, 0x11, 0xe6, 0x30,
//    0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45,
//    0x02, 0x21, 0x00, 0xe3, 0x4c, 0x28, 0xeb, 0xb0, 0x96, 0xb8, 0x5f, 0x2c, 0xdb, 0x56, 0x60, 0x55,
//    0x3d, 0x8d, 0x45, 0xbb, 0x70, 0xbb, 0x55, 0xc2, 0x98, 0x3b, 0xcc, 0x1f, 0xae, 0xf7, 0xe3, 0x37,
//    0x1d, 0xc5, 0x0d, 0x02, 0x20, 0x38, 0xf9, 0x5f, 0x09, 0xfa, 0xf8, 0xb1, 0x4c, 0xeb, 0xba, 0xdb,
//    0x65, 0x9c, 0xf2, 0xaf, 0x9d, 0x52, 0x40, 0x03, 0x21, 0xd2, 0x00, 0x96, 0xfa, 0x82, 0x08, 0xe7,
//    0xeb, 0x90, 0x18, 0xa0, 0xb4,
//];
//const K: &[u8] = &[
//    // private key data pkcs8
//];

struct KeychainClientCert {}
struct KeychainKey {}
struct Sign {}

impl sign::Signer for Sign {
    fn sign(&self, message: &[u8]) -> Result<Vec<u8>, Error> {
        // 这里用证书去keychain里选择私钥用来签名
        // 这里keychain不需要密码，是因为可以走cryptotokenkit透传到smartcard中
        // PIN认证是委托给smartcard
        // message 是原始的数据
        // 如果是用rust-ring在后面签名，需要使用原始数据传递过去
        // 如果用openssl签名，则需要在此处用sha256计算摘要了

        let actual = digest::digest(&digest::SHA256, message);
        let keychain = SecKeychain::default().unwrap();
        let sec_cert = SecCertificate::from_der(&C1).unwrap();
        let iden = SecIdentity::with_certificate(&[keychain], &sec_cert).unwrap();
        let seck = iden.private_key().unwrap();
        let s = seck
            .create_signature(
                security_framework::key::Algorithm::ECDSASignatureDigestX962SHA256,
                actual,
            )
            .unwrap();
        Ok(s)
    }

    fn scheme(&self) -> SignatureScheme {
        SignatureScheme::ECDSA_NISTP256_SHA256
    }
}

impl sign::SigningKey for KeychainKey {
    fn choose_scheme(&self, offered: &[SignatureScheme]) -> Option<Box<dyn sign::Signer>> {
        println!("{:?}", offered);
        let s = Sign {};
        Some(Box::new(s))
    }

    fn algorithm(&self) -> SignatureAlgorithm {
        SignatureAlgorithm::ECDSA
    }
}

impl ResolvesClientCert for KeychainClientCert {
    fn resolve(
        &self,
        acceptable_issuers: &[&[u8]],
        sigschemes: &[SignatureScheme],
    ) -> Option<Arc<sign::CertifiedKey>> {
        println!("{:?}", sigschemes); // 过滤算法
        println!("{:?}", acceptable_issuers); // 通过 acceptable_issuers 选择证书链

        // 塞证书链
        // Certificate(C1.to_vec())
        // Certificate(C2.to_vec())
        let cert: Vec<Certificate> = vec![Certificate(C1.to_vec())];
        let key: Arc<dyn sign::SigningKey> = Arc::new(KeychainKey {});
        let result = sign::CertifiedKey::new(cert, key);
        Some(Arc::new(result))
    }

    fn has_certs(&self) -> bool {
        true
    }
}

fn main() {
    let mut root_store = RootCertStore::empty();
    root_store.add_server_trust_anchors(webpki_roots::TLS_SERVER_ROOTS.0.iter().map(|ta| {
        OwnedTrustAnchor::from_subject_spki_name_constraints(
            ta.subject,
            ta.spki,
            ta.name_constraints,
        )
    }));

    // 如果使用证书文件，则使用以下接口
    // let cert_chain = vec![key::Certificate(C1.clone()), key::Certificate(C2)];
    // let key_der = rustls::key::PrivateKey(K);
    // .with_single_cert(cert_chain, key_der)

    let client_auth_cert_resolver = Arc::new(KeychainClientCert {});
    let config = rustls::ClientConfig::builder()
        .with_safe_defaults()
        .with_root_certificates(root_store, &[])
        .with_client_cert_resolver(client_auth_cert_resolver);

    let server_name = "git.https4u.org".try_into().unwrap();
    let mut conn = rustls::ClientConnection::new(Arc::new(config), server_name).unwrap();
    let mut sock = TcpStream::connect("git.https4u.org:443").unwrap();
    let mut tls = rustls::Stream::new(&mut conn, &mut sock);
    tls.write(
        concat!(
            "GET / HTTP/1.1\r\n",
            "Host: git.https4u.org\r\n",
            "Connection: close\r\n",
            "Accept-Encoding: identity\r\n",
            "\r\n"
        )
        .as_bytes(),
    )
    .unwrap();
    let ciphersuite = tls.conn.negotiated_cipher_suite().unwrap();
    writeln!(
        &mut std::io::stderr(),
        "Current ciphersuite: {:?}",
        ciphersuite.suite()
    )
    .unwrap();
    let mut plaintext = Vec::new();
    tls.read_to_end(&mut plaintext).unwrap();
    stdout().write_all(&plaintext).unwrap();
}
